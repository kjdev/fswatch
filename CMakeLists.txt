# CMake Version
CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)

# Build Type
SET(CMAKE_BUILD_TYPE Debug)
# Build Type Option
SET(CMAKE_C_FLAGS_RELEASE "-Wall -O2")
SET(CMAKE_C_FLAGS_DEBUG "-W -g")
SET(CMAKE_C_FLAGS_COVERAGE "-W -g -fprofile-arcs -ftest-coverage")
SET(CMAKE_EXE_LINKER_FLAGS_COVERAGE "-fprofile-arcs -ftest-coverage")

# Project
PROJECT(fswatch)
SET(MAJOR_VERSION 0)
SET(MINOR_VERSION 1)
SET(BUILD_VERSION 0)
#SET(REVISION_VERSION 0)

# inotifytools
FIND_PATH(INOTIFYTOOLS_INCLUDES
  NAMES inotifytools/inotify.h
  PATHS ${INOTIFYTOOLS_INCLUDE_PATH})

FIND_LIBRARY(INOTIFYTOOLS_LIBRARIES
  NAMES inotifytools
  PATHS ${INOTIFYTOOLS_LIBRARY_PATH})

IF(INOTIFYTOOLS_INCLUDES STREQUAL "INOTIFYTOOLS_INCLUDES-NOTFOUND")
  MESSAGE(FATAL_ERROR "inotifytools could not found inotify.h\n"
    "OPTION: -DINOTIFYTOOLS_INCLUDE_PATH=path")
ENDIF()

IF(INOTIFYTOOLS_LIBRARIES STREQUAL "INOTIFYTOOLS_LIBRARIES-NOTFOUND")
  MESSAGE(FATAL_ERROR "inotifytools could not found libinotifytools.so\n"
    "OPTION: -DINOTIFYTOOLS_LIBRARY_PATH=path")
ENDIF()

SET(CMAKE_REQUIRED_INCLUDES ${INOTIFYTOOLS_INCLUDES})
SET(CMAKE_REQUIRED_LIBRARIES ${INOTIFYTOOLS_LIBRARIES})

# Execute
ADD_EXECUTABLE(fswatch ${PROJECT_SOURCE_DIR}/src/fswatch.c)

# Link library
TARGET_LINK_LIBRARIES(fswatch ${INOTIFYTOOLS_LIBRARIES})

# Install
INSTALL_PROGRAMS(/bin FILES ${CMAKE_CURRENT_BINARY_DIR}/fswatch)

